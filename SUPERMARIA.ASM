.model small
.stack 4096
.data

;--------------------------------------------DATA MEMBERS--------------------------------------

Mario db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54               ; Mario Array
db 54,54,54,54,54,54,54,6h,6h,6h,6h,6h,6h,6h,6h,6h,6h,54,54,54,54,54,54
db 54,54,54,54,54,54,6h,114,6h,114,42,6h,6h,6h,6h,6h,6h,6h,54,54,54,54,54
db 54,54,54,54,54,6h,114,42,6h,6h,114,42,6h,6h,6h,6h,6h,6h,6h,54,54,54,54
db 54,54,54,54,6h,6h,114,42,6h,6h,114,42,6h,6h,6h,6h,6h,6h,6h,54,54,54,54
db 54,54,54,54,6h,6h,114,42,6h,6h,114,42,6h,6h,6h,6h,6h,6h,6h,54,54,54,54
db 54,54,54,6h,6h,6h,114,42,6h,6h,114,42,6h,6h,6h,6h,90,6h,6h,54,54,54,54
db 54,54,54,6h,6h,6h,114,42,6h,6h,114,42,6h,6h,6h,6h,90,6h,6h,54,54,54,54
db 54,54,54,6h,6h,6h,114,42,90,6h,90,90,90,15,90,90,15,90,6h,54,54,54,54
db 54,54,54,6h,6h,6h,114,42,90,6h,90,90,15,00,90,90,00,15,6h,54,54,54,54
db 54,54,54,6h,6h,6h,114,6h,90,6h,90,90,15,00,90,90,00,15,6h,54,54,54,54
db 54,54,54,6h,6h,6h,114,6h,90,90,90,90,90,15,90,90,15,90,6h,54,54,54,54
db 54,54,54,6h,6h,6h,114,6h,90,90,90,90,90,90,90,90,90,90,6h,54,54,54,54
db 54,54,54,6h,6h,6h,114,6h,6h,90,90,90,90,39,39,90,90,6h,6h,54,54,54,54
db 54,54,54,6h,6h,6h,114,6h,6h,6h,90,90,90,90,90,90,6h,6h,6h,54,54,54,54
db 54,54,54,6h,6h,6h,111,111,111,111,6h,90,90,90,90,6h,111,111,111,54,54,54,54
db 54,54,54,6h,6h,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,54,54,54
db 54,54,54,6h,6h,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,54,54,54
db 54,54,54,6h,90,90,90,111,111,111,015,015,111,015,015,111,111,111,90,90,90,54,54
db 54,54,54,90,90,90,6h,6h,111,111,111,015,015,015,111,111,111,6h,54,90,90,90,54
db 54,54,54,90,90,90,6h,6h,111,111,111,111,015,111,111,111,111,6h,54,90,90,90,54
db 54,54,54,6h,90,90,90,6h,111,111,111,111,111,111,111,111,111,6h,90,90,90,54,54
db 54,54,54,6h,6h,6h,6h,6h,104,104,104,104,104,104,104,104,104,6h,54,54,54,54,54
db 54,54,54,54,54,54,54,104,104,104,104,104,104,104,104,104,104,104,54,54,54,54,54
db 54,54,54,54,54,54,104,104,104,104,104,104,54,104,104,104,104,104,104,54,54,54,54
db 54,54,54,54,54,54,104,104,104,104,104,54,54,54,104,104,104,104,104,54,54,54,54
db 54,54,54,54,54,54,104,104,104,104,104,54,54,54,104,104,104,104,104,54,54,54,54
db 54,54,54,54,54,54,54,90,90,90,54,54,54,54,54,90,90,90,54,54,54,54,54
db 54,54,54,54,54,54,54,111,111,111,54,54,54,54,54,111,111,111,54,54,54,54,54
db 54,54,54,54,54,111,111,111,111,111,54,54,54,54,54,111,111,111,111,111,54,54,54
db 54,54,54,54,54,111,111,111,111,111,54,54,54,54,54,111,111,111,111,111,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54




Monster db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54                                ;Monster array
db 54,54,54,54,54,54,54,6h,6h,6h,6h,54,54,54,54,54,54,54
db 54,54,54,54,54,54,6h,6h,6h,6h,6h,6h,54,54,54,54,54,54
db 54,54,54,54,54,6h,6h,6h,6h,6h,6h,6h,6h,54,54,54,54,54
db 54,54,54,54,6h,6h,6h,6h,6h,6h,6h,6h,6h,6h,54,54,54,54
db 54,54,54,6h,0h,0h,6h,6h,6h,6h,6h,6h,0h,0h,6h,54,54,54
db 54,54,6h,6h,6h,15,0h,6h,6h,6h,6h,0h,15,6h,6h,6h,54,54
db 54,54,6h,6h,6h,15,0h,0h,0h,0h,0h,0h,15,6h,6h,6h,54,54
db 54,6h,6h,6h,6h,15,0h,15,6h,6h,15,0h,15,6h,6h,6h,6h,54
db 54,6h,6h,6h,6h,15,15,15,6h,6h,15,15,15,6h,6h,6h,6h,54
db 54,6h,6h,6h,6h,6h,6h,6h,6h,6h,6h,6h,6h,6h,6h,6h,6h,54
db 54,54,6h,6h,6h,6h,15,15,15,15,15,15,6h,6h,6h,6h,54,54
db 54,54,54,54,54,15,15,15,15,15,15,15,15,54,54,54,54,54
db 54,54,54,0h,0h,15,15,15,15,15,15,15,15,0h,0h,54,54,54
db 54,54,0h,0h,0h,0h,0h,15,15,15,15,0h,0h,0h,0h,0h,54,54
db 54,54,0h,0h,0h,0h,0h,0h,54,54,0h,0h,0h,0h,0h,0h,54,54
db 54,54,54,0h,0h,0h,0h,0h,54,54,0h,0h,0h,0h,0h,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54

Heart db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54                     ;heart array
db 54,54,54,39,39,39,54,54,54,39,39,39,54,54,54
db 54,54,39,39,39,39,39,54,39,39,39,39,39,54,54
db 54,4h,39,39,39,39,39,39,39,39,39,15,39,39,54
db 54,4h,39,39,39,39,39,39,39,39,39,15,39,39,54
db 54,4h,4h,39,39,39,39,39,39,39,15,15,39,39,54
db 54,54,4h,4h,39,39,39,39,39,39,39,39,39,54,54
db 54,54,54,4h,4h,39,39,39,39,39,39,39,54,54,54
db 54,54,54,54,4h,4h,39,39,39,39,39,54,54,54,54
db 54,54,54,54,54,4h,4h,39,39,39,54,54,54,54,54
db 54,54,54,54,54,54,4h,4h,39,54,54,54,54,54,54
db 54,54,54,54,54,54,54,4h,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54

Coin db 54,54,54,54,00,00,00,00,00,00,54,54,54,54                      ;coins
db 54,54,54,00,44,44,44,44,44,44,00,54,54,54
db 54,54,00,44,6h,6h,6h,6h,6h,44,44,00,54,54
db 54,00,44,6h,44,44,44,44,44,68,44,44,00,54
db 54,00,44,6h,44,68,68,44,44,68,44,44,00,54
db 00,44,6h,44,44,68,44,6h,44,44,68,44,44,00
db 00,44,6h,68,68,68,44,44,68,44,68,44,44,00
db 00,44,6h,68,44,44,44,44,44,6h,68,44,6h,00
db 00,44,6h,68,44,44,44,44,44,6h,68,44,6h,00
db 00,44,6h,44,6h,44,44,6h,6h,6h,68,44,6h,00
db 00,44,6h,44,44,68,44,6h,44,44,68,44,6h,00
db 54,00,44,6h,44,44,6h,6h,44,68,44,6h,00,54
db 54,00,44,6h,44,44,44,44,44,68,44,6h,00,54
db 54,54,00,44,68,68,68,68,68,44,6h,00,54,54
db 54,54,54,00,44,44,44,44,44,6h,00,54,54,54
db 54,54,54,54,00,00,00,00,00,00,54,54,54,54



Brick db  0,42,42,42,42,42,42,42,42,42,42,42,42,42						 	;bricks
db  0,114,114,114,114, 0,114,114,114,114,114,114,114,114
db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0
db  0,114,114,114,114,114,114,114,114, 0,114,114,114,114

Chocolate db 54,54,114,114,114,114,114,114,54,54,54,54,54,54				;chocolate
db 54,54,114,42,42,114,42,42,114,54,54,54,54,54
db 54,54,114,42,42,114,42,42,114,42,54,54,54,54
db 54,54,114,114,114,114,114,114,114,114,114,54,54,54
db 54,54,114,42,42,114,42,42,114,42,42,114,54,54
db 54,54,114,42,42,114,42,42,114,42,42,114,54,54
db 54,54,114,114,114,114,114,114,114,114,114,114,54,54
db 15,15,15,114,114,114,114,114,114,114,114,15,15,15
db 54,54,15,15,15,15,15,15,15,15,15,15,54,54
db 54,54,80,64,80,64,80,80,15,80,64,80,54,54
db 54,54,80,64,80,64,80,80,64,80,64,80,54,54
db 54,54,80,64,80,64,80,80,64,80,64,80,54,54
db 54,54,80,64,80,64,80,80,64,80,64,80,54,54
db 54,54,80,64,80,64,80,80,64,80,64,80,54,54
db 54,54,80,64,80,64,80,80,64,80,64,80,54,54
db 54,54,80,64,80,64,80,80,64,80,64,80,54,54
db 54,54,80,64,80,64,64,64,64,80,64,80,54,54
db 54,54,80,64,80,80,80,80,80,80,64,80,54,54
db 54,54,80,64,64,64,64,64,64,64,64,80,54,54
db 54,54,80,80,80,80,80,80,80,80,80,80,54,54

Ball db 54,54,54,54,54,54,54,54,54
db 54,54,54,54,40,54,54,54,54 									;fireball
db 54,54,54,54,40,54,54,54,54
db 54,54,40,54,40,54,54,54,54
db 54,54,41,54,41,40,54,54,54
db 54,54,41,41,42,41,40,54,54
db 54,41,41,41,42,41,40,54,54
db 54,40,41,42,43,42,41,40,54
db 40,41,42,43,44,43,42,41,40
db 40,41,42,43,44,43,42,41,40
db 40,41,42,43,44,43,42,41,40
db 40,41,42,43,44,43,42,41,40
db 54,40,41,42,43,42,41,40,54
db 54,54,40,41,42,41,40,54,54

Castle db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,41,41,41,41,208,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,41,41,41,208,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,41,41,208,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,41,208,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,41,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,41,41,41,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,41,41,41,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,41,41,41,41,41,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,54,54,54,54,41,41,41,41,41,54,54,54,54,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54  
db 54,54,54,41,41,41,41,208,54,54,54,54,54,54,54,54,54,54,54,41,41,41,41,41,41,41,54,54,54,54,54,54,54,41,41,41,41,208,54,54,54,54,54,54,54  
db 54,54,54,54,41,41,41,208,54,54,54,54,54,54,54,54,54,54,54,41,41,41,41,42,42,41,54,54,54,54,54,54,54,54,41,41,41,208,54,54,54,54,54,54,54  
db 54,54,54,54,54,41,41,208,54,54,54,54,54,54,54,54,54,54,41,41,41,41,41,41,41,41,41,54,54,54,54,54,54,54,54,41,41,208,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,41,208,54,54,54,54,54,54,54,54,54,54,41,41,41,41,41,41,42,42,41,54,54,54,54,54,54,54,54,54,41,208,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,54,41,41,41,42,42,41,41,41,41,41,41,54,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,54,41,41,41,41,41,41,41,41,41,41,41,54,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,41,41,41,41,41,42,42,41,41,41,41,41,41,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,54,41,41,41,41,41,41,41,41,41,41,41,41,41,54,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,208,54,54,54,54,54,54,54,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,54,54,54,54,54,54,54,208,54,54,54,54,54,54,54  
db 54,54,54,54,54,54,54,208,54,54,54,54,54,24,24,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,24,24,54,54,54,54,54,208,54,54,54,54,54,54,54   
db 54,54,54,54,54,54,54,41,54,54,54,54,54,24,24,41,24,24,41,24,24,41,24,41,24,24,41,24,24,41,24,24,54,54,54,54,54,41,54,54,54,54,54,54,54
db 54,54,54,54,54,54,41,41,41,54,54,54,54,24,24,41,24,24,41,24,24,41,24,41,24,24,41,24,24,41,24,24,54,54,54,54,41,41,41,54,54,54,54,54,54
db 54,54,54,54,54,54,41,41,41,54,54,54,54,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,54,54,54,54,41,41,41,54,54,54,54,54,54  
db 54,54,54,54,54,41,41,41,41,41,54,54,54,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,54,54,54,41,41,41,41,41,54,54,54,54,54  
db 54,54,54,54,54,41,41,41,41,41,54,54,54,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,54,54,54,41,41,41,41,41,54,54,54,54,54  
db 54,54,54,54,41,41,41,41,41,41,41,54,54,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,54,54,41,41,41,41,41,41,41,54,54,54,54  
db 54,54,54,54,41,41,41,41,41,41,41,54,54,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,54,54,41,41,41,41,41,41,41,54,54,54,54
db 54,54,54,41,41,41,41,41,41,41,41,41,54,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,54,41,41,41,41,41,41,41,41,41,54,54,54
db 54,54,54,41,41,41,41,41,41,41,41,41,54,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,54,41,41,41,41,41,41,41,41,41,54,54,54
db 54,54,41,41,41,41,41,41,41,41,41,41,41,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,41,41,41,41,41,41,41,41,41,41,41,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,23,23,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,208,208,23,24,208,208,24,24,24,208,208,24,24,208,208,24,24,22,22,21,21,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,21,21,22,22,22,22,22,22,24,24,208,208,24,24,208,208,24,24,24,208,208,23,23,208,208,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,208,208,24,24,208,208,24,24,24,208,208,24,24,208,208,24,24,22,22,22,21,21,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,21,21,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,21,21,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,21,21,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,22,22,21,21,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,23,23,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,21,21,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,21,21,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,21,21,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,21,21,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,23,23,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,21,21,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,21,21,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,21,21,22,22,21,21,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,21,21,22,22,24,24,24,24,24,24,24,24,24,24,24,24,23,23,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,21,21,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,21,21,22,22,22,22,22,22,22,22,54,54
db 54,54,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24,24,24,24,23,23,24,24,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,54,54
db 24,24,24,22,24,24,24,22,24,24,24,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,24,24,24,22,24,24,24,22,24,24,24
db 24,24,24,22,24,24,24,22,24,24,24,22,22,24,24,24,24,24,24,24,24,24,23,23,24,24,24,24,24,24,24,24,22,22,24,24,24,22,24,24,24,24,24,24,24
db 24,24,24,24,24,24,24,24,24,24,24,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,24,24,24,24,24,24,24,24,24,24,24
db 25,25,25,25,25,25,25,25,25,25,25,22,22,24,24,24,24,24,24,24,24,24,24,23,23,24,24,24,24,24,24,24,22,22,25,25,25,25,25,25,25,25,25,25,25
db 25,25,25,25,25,25,25,25,25,25,25,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,25,25,25,25,25,25,25,25,25,25,25
db 24,24,24,24,23,23,24,24,24,24,24,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,24,23,23,24,24,24,24,23,23,24,24
db 24,24,24,24,24,24,24,24,24,24,24,22,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,22,22,24,24,24,24,24,24,24,24,24,24,24
db 24,24,24,24,24,23,23,24,24,24,24,23,23,23,24,23,23,24,23,23,24,23,23,23,24,23,23,24,23,23,24,23,23,23,24,24,24,24,24,24,23,23,24,24,24
db 24,23,23,24,24,24,24,24,24,24,24,23,23,23,24,23,23,24,23,23,24,23,23,23,24,23,23,24,23,23,24,23,23,23,24,23,23,24,24,24,24,24,24,24,24
db 24,24,24,24,24,24,24,24,24,24,24,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24
db 24,24,24,24,24,24,24,24,24,24,24,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24
db 24,24,24,24,24,208,208,24,24,24,24,23,23,24,24,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,23,23,23,23,24,24,24,24,24,208,208,24,24,24,24
db 24,24,24,24,208,208,208,208,24,24,24,23,23,23,23,23,23,23,23,23,114,114,114,114,114,23,23,23,23,23,23,23,23,23,24,24,24,24,208,208,208,208,24,24,24
db 24,24,24,24,208,208,208,208,24,24,24,23,23,24,24,23,23,23,23,114,6h,6h,6h,42,42,114,23,24,24,23,23,23,23,23,24,24,24,24,208,208,208,208,24,24,24
db 24,24,24,24,208,208,208,208,24,24,24,23,23,23,23,23,23,23,114,6h,6h,6h,6h,42,42,42,114,23,23,23,23,23,23,23,24,24,24,24,208,208,208,208,24,24,24
db 24,24,24,24,208,208,208,208,24,24,24,23,23,23,23,23,23,114,6h,6h,6h,6h,6h,42,42,42,42,114,23,23,23,23,23,23,24,24,24,24,208,208,208,208,24,24,24
db 24,23,23,24,24,24,24,24,24,24,24,23,23,23,23,23,23,114,6h,6h,6h,6h,6h,42,42,42,42,114,23,23,23,23,23,23,24,23,23,24,24,24,24,24,24,24,24
db 24,24,24,24,24,24,24,24,24,24,24,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24
db 24,24,23,23,24,24,24,24,23,23,24,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,23,23,23,24,24,23,23,24,24,24,24,23,23,24
db 24,24,24,24,24,24,24,24,24,24,24,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,24,24,23,23,24,24,24,24,24,24,24,24,24,24,24
db 24,23,23,24,24,208,208,24,24,24,24,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,23,23,23,24,23,23,24,24,208,208,24,24,24,24
db 24,24,24,24,208,208,208,208,24,24,24,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,24,24,23,24,24,24,24,208,208,208,208,24,24,24
db 24,24,24,24,208,208,208,208,24,24,24,23,24,24,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,23,23,23,24,24,24,24,208,208,208,208,24,24,24
db 24,24,24,24,208,208,208,208,24,24,24,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,23,23,23,24,24,24,24,208,208,208,208,24,24,24
db 24,24,24,24,208,208,208,208,24,24,24,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,23,23,23,24,24,24,24,208,208,208,208,24,24,24
db 24,24,24,24,24,24,24,24,24,24,24,23,23,24,24,23,114,6h,6h,6h,6h,67,6h,42,67,42,42,42,114,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24
db 24,24,23,23,24,24,24,24,24,24,24,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,23,23,23,24,24,23,23,24,24,24,24,24,24,24
db 24,24,24,24,24,24,24,24,24,24,24,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24
db 24,24,24,23,23,24,24,24,24,24,24,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,23,23,23,24,24,24,23,23,24,24,24,24,24,24
db 25,25,25,25,25,25,25,25,25,25,25,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,23,23,23,25,25,25,25,25,25,25,25,25,25,25
db 25,25,25,25,25,25,25,25,25,25,25,23,23,23,23,23,114,6h,6h,6h,6h,6h,6h,42,42,42,42,42,114,23,23,23,23,23,25,25,25,25,25,25,25,25,25,25,25

Pikachu db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,44,44,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,44,44,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,44,44,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,44,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,44,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,18,44,44,44,18,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,18,44,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,44,18,18,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,18,18,44,44,44,18,18,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,18,18,44,44,44,44,18,18,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,44,18,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,18,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,18,54,54,54,54,54,54,54,54,54,54,54,18,18,54,54
db 54,18,18,18,18,54,54,54,54,54,54,54,54,54,54,54,54,54,18,44,44,18,54,54,54,54,54,54,54,54,54,18,18,18,18,54,54
db 54,18,18,18,18,18,54,54,54,54,54,54,54,54,54,54,54,54,18,44,18,54,54,54,54,54,54,54,54,54,18,18,18,18,18,54,54
db 54,18,18,18,18,18,18,54,54,54,54,54,54,54,18,18,18,18,18,18,18,18,54,54,54,54,54,54,54,18,18,18,18,18,18,54,54
db 54,18,18,18,18,44,44,18,54,54,54,54,18,18,44,44,44,44,44,44,44,44,18,18,54,54,54,54,18,44,44,18,18,18,18,54,54
db 54,54,18,18,18,44,44,44,18,54,18,18,44,44,44,44,44,44,44,44,44,44,44,44,18,18,54,18,44,44,44,18,18,18,54,54,54
db 54,54,54,18,44,44,44,44,44,18,44,44,44,44,44,18,18,18,18,18,18,18,18,44,44,44,18,44,44,44,44,44,18,54,54,54,54
db 54,54,54,18,44,44,44,44,44,18,44,18,18,18,18,44,44,44,44,44,44,44,44,18,18,18,18,44,44,44,44,44,18,54,54,54,54
db 54,54,54,18,44,44,44,44,44,44,18,18,44,44,44,44,44,44,44,44,44,44,44,44,18,18,44,44,44,44,44,44,18,54,54,54,54
db 54,54,54,54,18,44,44,44,44,18,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,18,54,54,54,54,54
db 54,54,54,54,18,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,18,54,54,54,54,54
db 54,54,54,54,54,18,44,18,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,18,54,54,54,54,54,54
db 54,54,54,54,54,18,44,18,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,18,54,54,54,54,54,54
db 54,54,54,54,18,44,18,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,18,54,54,54,54,54
db 54,54,54,54,18,44,18,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,18,54,54,54,54,54
db 54,54,54,18,18,18,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,18,18,18,54,54,54,54
db 54,54,18,18,44,18,44,44,44,44,00,00,44,44,44,44,44,44,44,44,44,44,44,44,00,00,44,44,44,44,18,44,18,18,54,54,54
db 54,18,44,18,44,18,44,44,44,00,15,00,00,44,44,44,44,44,44,44,44,44,44,00,00,15,00,44,44,44,18,44,18,44,18,54,54
db 54,18,44,18,18,18,44,44,44,00,00,00,00,44,44,44,44,44,44,44,44,44,44,00,00,00,00,44,44,44,18,18,18,44,18,54,54
db 54,54,18,44,18,44,44,44,44,44,00,00,44,44,44,44,44,44,44,44,44,44,44,44,00,00,44,44,44,44,44,18,44,18,54,54,54
db 54,54,18,18,18,44,44,40,40,44,44,44,44,44,44,44,44,00,00,44,44,44,44,44,44,44,44,40,40,44,44,18,18,18,54,54,54
db 54,54,54,18,18,44,40,40,40,40,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,40,40,40,40,44,18,18,54,54,54,54
db 54,54,54,54,54,18,40,40,40,40,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,40,40,40,40,18,54,54,54,54,54,54
db 54,54,54,54,54,18,44,40,40,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,40,40,44,18,54,54,54,54,54,54
db 54,54,54,54,54,54,18,44,44,44,44,44,44,44,00,44,44,00,00,44,44,00,44,44,44,44,44,44,44,18,54,54,54,54,54,54,54
db 54,54,54,54,54,54,18,18,18,44,44,44,44,44,44,00,00,44,44,00,00,44,44,44,44,44,44,18,18,18,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,18,18,18,44,44,44,44,44,44,44,44,44,44,44,44,18,18,18,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,18,44,18,18,44,44,44,44,44,44,44,44,18,18,44,18,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,18,44,44,44,18,18,18,18,18,18,18,18,44,44,44,18,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,18,44,44,44,44,44,18,40,44,44,44,44,44,18,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,18,18,44,44,44,40,44,44,18,44,44,44,18,18,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,18,44,18,44,41,41,40,18,44,18,44,18,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,18,18,18,41,42,41,40,18,18,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,41,41,42,41,40,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,40,41,43,42,41,40,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,40,41,42,44,43,42,41,40,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,40,41,42,44,43,42,41,40,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,40,41,42,44,43,42,41,40,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,40,41,42,44,43,42,41,40,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,40,41,43,42,41,40,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,40,42,41,40,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54

Flag db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,00,00,00,00
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,00,208,208,00
db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,208,208,00
db 00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00
db 54,00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00 
db 54,00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00 
db 54,54,00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00 
db 54,54,00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00 
db 54,54,54,00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00 
db 54,54,54,00,31,31,31,31,31,31,31,00,31,31,31,31,31,31,00,31,31,31,31,31,31,00,31,31,31,31,31,00,208,208,00 
db 54,54,54,54,00,31,31,31,31,31,31,00,00,31,31,31,31,00,44,00,31,31,31,31,00,00,31,31,31,31,31,00,208,208,00  
db 54,54,54,54,00,31,31,31,31,31,31,00,44,00,31,31,00,44,51,44,00,31,31,00,44,00,31,31,31,31,31,00,208,208,00  
db 54,54,54,54,54,00,31,31,31,31,31,00,44,44,00,00,44,44,51,44,44,00,00,44,44,00,31,31,31,31,31,00,208,208,00  
db 54,54,54,54,54,00,31,31,31,31,31,00,44,44,44,44,44,44,44,44,44,44,44,44,44,00,31,31,31,31,31,00,208,208,00  
db 54,54,54,54,54,00,31,31,31,31,31,00,44,44,43,43,43,43,51,43,43,43,43,44,44,00,31,31,31,31,31,00,208,208,00  
db 54,54,54,54,54,00,31,31,31,31,31,00,2h,43,40,4h,43,51,52,52,43,48,2h,43,40,00,31,31,31,31,31,00,208,208,00  
db 54,54,54,54,54,00,31,31,31,31,31,00,10,43,4h,11,43,53,53,53,43,2h,10,43,4h,00,31,31,31,31,31,00,208,208,00  
db 54,54,54,54,00,31,31,31,31,31,31,00,44,44,44,44,44,44,53,44,44,44,44,44,44,00,31,31,31,31,31,00,208,208,00  
db 54,54,54,54,00,31,31,31,31,31,31,00,43,43,43,43,43,43,43,43,43,43,43,43,43,00,31,31,31,31,31,00,208,208,00  
db 54,54,54,00,31,31,31,31,31,31,31,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,31,31,31,31,31,00,208,208,00  
db 54,54,54,00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00 
db 54,54,00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00
db 54,54,00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00
db 54,00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00
db 54,00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00
db 00,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,00,208,208,00
db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,208,208,00
db 54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,00,208,208,00

Pole db 00,208,208,00





;-------SCREEN MODE-------------
_welcome byte "WELCOME TO SUPER MARIA"
_enter byte "ENTER YOUR NAME UPTO 8 LETTERS"
_name byte 8 DUP('$')
_over byte "GAME OVER"
_again byte "Press ESC to Start Again"
_quit byte "Press ENTER to Quit"
_level byte "Level:"
_score byte "Score:"
_cursor byte 9

;--------HURDLES------------------
xpos word 0
ypos word 0
len word 0
hei word 0
temp1 word 0
temp2 word 0

;---------MARIO----------
Dx_Mario word 20
Dy_Mario word 163

;---------MONSTER--------
Dx_Monster word 116
Dy_Monster word 177

Dx2_Monster word 190
Dy2_Monster word 177

;---------HEART----------
dx_heart word    100
dy_heart word    130

;-------CHOCOLATE--------
dx_choc word 200
dy_choc word 120

;---------PIKACHU--------
dx_pika word 76
dy_pika word 20

;---------FIRE BALL------
dx_ball word 89
dy_ball word 67

;-----------COIN-----------
dx_coin word 50
dy_coin word 50

;------------CASTLE---------
dx_castle word 270
dy_castle word 102

;------------FLAG---------
dx_flag word 283
dy_flag word 25

;---------SURFACE BRICKS-----
xs word 0
ys word 196

;----------BACKGROUND---------
dx_back word  0
dy_back word 20

;----------FLAGS AND SCORES----------
flyFlag byte 0
downFlag byte 0
gameScore byte 0
gamelevel byte 1
scoreflag byte 0
scoreflag2 byte 0
scoreflag3 byte 0
ground word 0
flycount word 0
pikaflag word 0
monflag word 0
monflag2 word 0
lives word 2
touchmons word 0
touchfire word 0
;--------------------------------------------------------------------------------
.code
;----------------------------MAIN----------------------------------------
Main proc
    mov ax,@data
    mov ds,ax
	mov Dx_Mario,150
	mov Dy_mario,20
	call ClearScreen
	call StartScreen
    call Level_1
Main endp
;--------------------------------------------LEVELS-------------------------------------------------------------------------------------

Level_1 proc                                   ;level1
    mov scoreflag,0
    mov scoreflag2,0
    mov scoreflag3,0

    mov flyFlag ,0
	mov downFlag, 0
	mov gameScore, 0
	mov gamelevel, 1
	mov scoreflag, 0
	mov scoreflag2, 0
	mov scoreflag3, 0
	mov ground, 0
	mov flycount, 0
	mov pikaflag, 0
	mov monflag2,0
	mov monflag, 0
	mov lives, 2
	mov touchmons, 0
	mov touchfire, 0

    call DrawBackground
    Call DrawFlag
    Call CallHurdles
    mov Dx_Mario ,20
    mov Dy_Mario ,163
    call DrawMario
    call drawsurface
    call Screen
	infinite:
	    call DrawMario

	    ;----------------MOVEMENT AND FLYING------------------------------------
		call Screen
		Call Keydetect
		Call DrawFlag
		Call CallHurdles
		Call FlyUp
		
        .if Dx_Mario < 80 || Dx_Mario > 120 && Dx_Mario < 150 || Dx_Mario > 190 && Dx_Mario < 220 || Dx_Mario > 260
		    Call FlyDown
		.elseif Dy_Mario < 120
		    Call FlyDown
		    Call FlyUp
		.endif
		call drawsurface
		;---------------------------------------------------------------------------

       
        ;-------------------HEART AND SCORE----------------------------------------
		.if scoreflag==0
			mov dx_coin,50
			mov dy_coin,100
			call DrawCoin
		.endif
		.if Dx_Mario>=30 && Dx_Mario <=64 && scoreFlag==0
	       .if Dy_Mario>=100 && Dy_Mario<=116
		        add gamescore,1
		        mov scoreflag,1
		        mov dx_coin,50
			    mov dy_coin,100
		        call DrawCoinBox
	       .endif
	    .endif
        
        .if scoreflag2==0
			mov dx_coin,100
			mov dy_coin,70
			call DrawCoin
		.endif
	    .if Dx_Mario>=80 && Dx_Mario <=114 && scoreFlag2==0
	       .if Dy_Mario>=70 && Dy_Mario<=86
		        add gamescore,1
		        mov scoreflag2,1
		        mov dx_coin,100
			    mov dy_coin,70
		        call DrawCoinBox
	       .endif
	    .endif

	    .if scoreflag3==0
			mov dx_coin,170
			mov dy_coin,120
			call DrawCoin
		.endif
	    .if Dx_Mario>=147 && Dx_Mario <=187 && scoreFlag3==0
	       .if Dy_Mario>=105 && Dy_Mario<=146
		        add gamescore,1
		        mov scoreflag3,1
		        mov dx_coin,170
			    mov dy_coin,120
		        call DrawCoinBox
	       .endif
	    .endif

	    ;---------------------------------------------------------------------

		.if Dx_Mario==292
		    jmp ex
		.endif  
		jmp infinite 
	ex:
	call Level_2 
ret
Level_1 endp

Level_2 proc                                    ;level2

    call DrawBackground
	add gamelevel,1
	mov Dx_Mario,0
	mov Dy_Mario,163
    mov scoreflag,0
    mov scoreflag2,0
    mov scoreflag3,0
    call Screen
    call CallHurdles
    call drawFlag
   Loopinfinite:
        cmp lives,0
        je ex1
        call DrawMario
        ;-----------------MOVEMENT OF MONSTER------------------------------

	    .if Dx_Monster <=152 && monflag==1        ;enemy1
             dec Dx_Monster
	    .endif

	    .if Dx_Monster >=116 && monflag==0
             inc Dx_monster
	    .endif

	    .if Dx_Monster==152
	        mov monflag,1
	    .endif

	    .if Dx_Monster==116
	        mov monflag,0
	    .endif



	    .if Dx2_Monster <=220 && monflag2==1      ;enemy2
             dec Dx2_Monster
	    .endif

	    .if Dx2_Monster >=187 && monflag2==0
             inc Dx2_monster
	    .endif

	    .if Dx2_Monster==220
	        mov monflag2,1
	    .endif

	    .if Dx2_Monster==187
	        mov monflag2,0
	    .endif

	    call DrawMonster
	    call DrawMonster2
	    ;---------------------------------------------------


	    ;------------------MOVEMENT AND FLYING----------------
	    call Screen
	    Call Keydetect
		Call FlyUp
		.if Dx_Mario < 80 || Dx_Mario > 120 && Dx_Mario < 150 || Dx_Mario > 190 && Dx_Mario < 220 || Dx_Mario > 260
		    Call FlyDown
		.elseif Dy_Mario < 120
		    Call FlyDown
		    Call FlyUp
		.endif
		call CallHurdles
		call drawsurface
		;------------------------------------------------------


		;---------------------MONSTER AND MARIO COLLISION-------
		 Call getdownpixel
		 .if al == 06h
		      dec lives
		      mov Dx_Mario,0
		      mov Dy_Mario,163
		      call DrawBackground
		      call callHurdleslevel3
		      call DrawFlag
		      call DrawSurface
		.endif


		;-------------------------------------------------------


		;------------------------HEART CHOCOLATE AND SCORE--------
		.if scoreflag==0
		    mov dx_heart,70
		    mov dy_heart,50
			call DrawHeart
		.endif
		.if Dx_Mario>=47 && Dx_Mario <=87 && scoreFlag==0
	       .if Dy_Mario>=45 && Dy_Mario<=65
		        add lives,1
		        mov scoreflag,1
		        mov dx_heart,70
		        mov dy_heart,50
		        call DrawHeartBox
	       .endif
	    .endif

	    .if scoreflag2==0
	        mov dx_choc, 230
            mov dy_choc, 80
			call DrawChocolate
		.endif
		.if Dx_Mario>=207 && Dx_Mario <=247 && scoreFlag2==0
	       .if Dy_Mario>=70 && Dy_Mario<=96
		        add gameScore,3
		        mov scoreflag2,1
		        mov dx_choc, 230
                mov dy_choc, 80
		        call DrawChocolateBox
	       .endif
	    .endif

	    .if scoreflag3==0
			mov dx_coin,170
			mov dy_coin,120
			call DrawCoin
		.endif
	    .if Dx_Mario>=147 && Dx_Mario <=187 && scoreFlag3==0
	       .if Dy_Mario>=105 && Dy_Mario<=146
		        add gamescore,1
		        mov scoreflag3,1
		        mov dx_coin,170
			    mov dy_coin,120
		        call DrawCoinBox
	       .endif
	    .endif

	    ;---------------------------------------------------------



		.if Dx_Mario>=292
		    jmp ex1
		.endif

		jmp Loopinfinite
	ex1:
	   call Level_3
ret
Level_2 endp


Level_3 proc                                    ;level3
   cmp lives,0
   je ex2
   call DrawBackground
   mov Dx_Mario,0
   mov Dy_Mario,163
   add gameLevel,1
   call callHurdleslevel3
   call DrawCastle
   call DrawSurface
   mov scoreflag,0
   mov scoreflag2,0
   mov scoreflag3,0
   
   Loopinfinite:
         call DrawMario
        ;-----------------MOVEMENT OF PIKACHU AND MONSTER AND FIREBALL MOVEMENT----------
	    .if Dx_Monster <=152 && monflag==1
             dec Dx_Monster
	    .endif

	    .if Dx_Monster >=116 && monflag==0
             inc Dx_monster
	    .endif

	    .if Dx_Monster==152
	        mov monflag,1
	    .endif

	    .if Dx_Monster==116
	        mov monflag,0
	    .endif

	    .if Dx_pika <=235 && pikaflag == 1
             dec Dx_pika
	    .endif

	    .if Dx_pika >=50 && pikaflag==0
             inc Dx_pika
	    .endif

	    .if Dx_pika == 235
	        mov pikaflag,1
	    .endif

	    .if Dx_pika == 50
		mov pikaflag,0
	    .endif
	    inc dy_ball
	    call DrawMonster
	    call drawPika
	    .if dy_ball <181
	       call drawball
	    .endif

	    .if dy_ball ==181
	       call DrawBox
           mov dy_ball, 67
           mov bx,dx_pika
           add bx,14
           mov dx_ball,bx
	    .endif 


	    ;------------------------------------------------------


	    ;---------------------MONSTER AND MARIO COLLISION-------
		 Call getdownpixel
		 .if al == 06h
		      dec lives
		      mov Dx_Mario,0
		      mov Dy_Mario,163
		      call DrawBackground
		      call callHurdleslevel3
		      call DrawCastle
		      call DrawSurface
		.endif


		;-------------------------------------------------------
        
         
        ;----------COLLISION WITH PIKACHU AND FIREBALL-------------------------

        mov bx,dy_mario
        sub bx,14
        mov ax,bx
        mov dx,dx_mario
        mov cx,dx
        add cx,25
	    .if dy_ball >= bx && dy_ball<=ax && dx_ball>=dx && dx_ball<=cx
	        dec lives
	        mov Dx_Mario,0
	        mov Dy_Mario,163
	        call DrawBackground
	        call callHurdleslevel3
	        call DrawCastle
		    call DrawSurface
	    .endif
        
        mov bx,dy_pika
        mov ax,bx
        add ax,61
        mov dx,dx_pika
        mov cx,dx
        sub dx,23
        add cx,31
	    .if dy_mario >= bx && dy_mario<=ax && dx_mario>=dx && dx_mario<=cx
	        dec lives
	        mov Dx_Mario,0
	        mov Dy_Mario,163
	        call DrawBackground
	        call callHurdleslevel3
	        call DrawCastle
		    call DrawSurface
	    .endif

	    .if lives==0
	        mov touchfire,1
	    .endif
	    cmp touchfire,1
		je ex2
        ;----------------------------------------------------------

	    ;------------------MOVEMENT AND FLYING------------
	    call Screen
	    Call Keydetect
		Call FlyUp
		.if Dx_Mario < 80 || Dx_Mario > 120 && Dx_Mario < 150 || Dx_Mario > 190
		    Call FlyDown
		.elseif Dy_Mario < 120
		    Call FlyDown
		    Call FlyUp
		.endif
		
		call drawsurface
		call callHurdleslevel3
        ;------------------------------------------------------------

        ;--------------------HEART AND SCORE------------------------------
		.if scoreflag==0
		    mov dx_coin,130
		    mov dy_coin,90
			call DrawCoin
		.endif
		.if Dx_Mario>=107 && Dx_Mario <=147 && scoreFlag==0
	       .if Dy_Mario>=85 && Dy_Mario<=105
		        add gameScore,1
		        mov scoreflag,1
		        mov dx_coin,130
		        mov dy_coin,90
		        call DrawCoinBox
	       .endif
	    .endif

	    ;-------------------------------------------------------- 


		cmp Dx_Mario,247
		 jae ex2

		jmp Loopinfinite
    ex2:
    call GameOver
ret
Level_3 endp


GameOver proc
    call DrawBackground2
 _nex:   
    mov ah,0h
    int 16h
    .if(ah==01h)
       call level_1
    .endif
    cmp ah,1ch
    je ex
    jmp _nex

ex:
   call ClearScreen
   mov ah,4ch
   int 21h
ret 
GameOver endp

;----------------------------------------------------------------------------------------------------------------------------------



;--------------------------------------DRAWING FUNCTIONS---------------------------------------------------------------------------

StartScreen proc                                ;start screen
	
    Call DrawFlag2
    Call CallHurdles
    call DrawMario2
    call drawsurface
    
	mov ah,02h  ;set cursor
	mov dh,8
	mov dl,_cursor
	int 10h
	mov cx,22
	mov si,offset _welcome

	LoopWelcome:
	    push cx
	    mov al,[si]
	    mov bh,0
	    mov bl,15
	    mov cx,1
	    mov ah,0Ah
	    int 10h
	    add si, TYPE _welcome
	    add _cursor,1
	    mov ah,02h
	    mov dh,8
	    mov dl,_cursor
	    int 10h

	    pop cx
	LOOP LoopWelcome

	mov _cursor,5
	mov ah,02h  ;set cursor
	mov dh,10
	mov dl,_cursor
	int 10h
	mov cx,30
	mov si,offset _enter

	LoopEnter:
	    push cx
	    mov al,[si]
	    mov bh,0
	    mov bl,15
	    mov cx,1
	    mov ah,0Ah
	    int 10h
	    add si, TYPE _enter
	    inc _cursor
	    mov ah,02h
	    mov dh,10
	    mov dl,_cursor
	    int 10h

	    pop cx
	LOOP LoopEnter


	mov _cursor,16
	mov ah,02h  ;set cursor
	mov dh,12
	mov dl,_cursor
	int 10h
	mov cx,8
	mov si,offset _name
	LoopName:
	    push cx
	    mov ah,01h
	    int 21h
	    mov [si],al
	    add si, TYPE _name
	    inc _cursor
	    mov ah,02h
	    mov dh,12
	    mov dl,_cursor
	    int 10h

	    pop cx
	LOOP LoopName
	call DrawFlag
	call CallHurdles
	call DrawSurface
	call DrawMario2
ret 
StartScreen endp

ClearScreen proc                                ;clear screen
    mov ah,0
    mov al,13h 
    int 10h
ret
ClearScreen endp

DrawMario proc                        			; draw mario
	push Dx_Mario
	push Dy_Mario
	mov cx,33
	mov si,offset Mario
	Loop1:

	     push cx
	     push Dx_Mario
	     mov cx,23
	     Loop2:
	         push cx
	         mov ah,0Ch
			 mov al,byte ptr [si]
			 mov cx,Dx_Mario
			 mov dx,Dy_Mario
	         int 10h
			 inc Dx_Mario
			 pop cx
			 add si ,TYPE Mario
	     LOOP Loop2
	     inc Dy_Mario
	     pop Dx_Mario
	     pop cx
	LOOP Loop1
	     pop Dy_MArio
	     pop Dx_mario
ret
DrawMario endp


DrawMario2 proc                        			; draw mario
	push Dx_Mario
	push Dy_Mario
	mov cx,33
	mov si,offset Mario
	Loop1:

	     push cx
	     push Dx_Mario
	     mov cx,23
	     Loop2:
	        mov bl,[si]
	        .if bl==54
		         push cx
		         mov ah,0Ch
				 mov al,00
				 mov cx,Dx_Mario
				 mov dx,Dy_Mario
		         int 10h
				 inc Dx_Mario
				 pop cx
				 add si ,TYPE Mario
			 .else
				 push cx
		         mov ah,0Ch
				 mov al,[si]
				 mov cx,Dx_Mario
				 mov dx,Dy_Mario
		         int 10h
				 inc Dx_Mario
				 pop cx
				 add si ,TYPE Mario
			 .endif
	     LOOP Loop2
	     inc Dy_Mario
	     pop Dx_Mario
	     pop cx
	LOOP Loop1
	     pop Dy_MArio
	     pop Dx_mario
ret
DrawMario2 endp

DrawFlag proc                					  ; draw flag
	push dx_flag
	push dy_flag
	mov si, offset Flag
		mov cx,27
		Loop2:
			 push cx
			 push dx_flag
			 mov cx,35
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,dx_flag
				 mov dx,dy_flag
				 int 10h
				 inc dx_flag
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc dy_flag
			 pop dx_flag
			 pop cx
		LOOP Loop2

		mov cx,144
		mov dx_flag,314
		mov dy_flag,52
		Loop4:
			 push cx
			 push dx_flag
			 mov cx,4
			 mov si,offset Pole
			 Loop5:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,dx_flag
				 mov dx,dy_flag
				 int 10h
				 inc dx_flag
				 pop cx
				 inc si
			
			 LOOP Loop5
			 inc dy_flag
			 pop dx_flag
			 pop cx
		LOOP Loop4
        

		pop dy_flag
		pop dx_flag
ret
DrawFlag endp

DrawFlag2 proc                					  ; draw flag
	push dx_flag
	push dy_flag
	mov si, offset Flag
		mov cx,27
		Loop2:
			 push cx
			 push dx_flag
			 mov cx,35
			 Loop3:
			    mov bl,[si]
			    .if bl==54
					 push cx
					 mov ah,0Ch
					 mov al,00
					 mov cx,dx_flag
					 mov dx,dy_flag
					 int 10h
					 inc dx_flag
					 pop cx
					 inc si
				.else
					 push cx
					 mov ah,0Ch
					 mov al,[si]
					 mov cx,dx_flag
					 mov dx,dy_flag
					 int 10h
					 inc dx_flag
					 pop cx
					 inc si
				 .endif  
			
			 LOOP Loop3
			 inc dy_flag
			 pop dx_flag
			 pop cx
		LOOP Loop2

		mov cx,144
		mov dx_flag,314
		mov dy_flag,52
		Loop4:
			 push cx
			 push dx_flag
			 mov cx,4
			 mov si,offset Pole
			 Loop5:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,dx_flag
				 mov dx,dy_flag
				 int 10h
				 inc dx_flag
				 pop cx
				 inc si
			
			 LOOP Loop5
			 inc dy_flag
			 pop dx_flag
			 pop cx
		LOOP Loop4
        

		pop dy_flag
		pop dx_flag
ret
DrawFlag2 endp

DrawHurdles proc                                ;draw hurdles
    mov cx,xpos
    mov bx,xpos
    add bx,hei
    mov hei,bx
    mov bx,ypos
    add bx,len
    mov len,bx
    mov dx,ypos
    mov ah,0ch
    mov al,04h
    col:
	inc cx
	int 10h
	cmp cx,hei
	jne col
	mov cx,xpos
	inc dx
	cmp dx,len
	jne col
    sub xpos,5
    sub ypos,5
    mov cx,xpos
    mov bx,xpos
    add bx,25
    mov hei,bx
    mov bx,ypos
    add bx,15
    mov len,bx
    mov dx,ypos
    mov ah,0ch
    mov al,04h
     col1:
	inc cx
	int 10h
	cmp cx,hei
	jne col1

	mov cx,xpos
	inc dx
	cmp dx,len
	jne col1
ret
DrawHurdles endp


DrawMonster proc                                ; draw monster
	mov cx,18
	push Dx_Monster
	push Dy_Monster
	mov si,offset Monster
	Loop1:
	     push cx
	     push Dx_Monster
	     mov cx,18
	     Loop2:
	         push cx
	         mov ah,0Ch
			 mov al,byte ptr [si]
			 mov cx,Dx_Monster
			 mov dx,Dy_Monster
	         int 10h
			 inc Dx_Monster
			 pop cx
			 add si ,TYPE Monster
	     LOOP Loop2
	     inc Dy_Monster
	     pop Dx_Monster
	     pop cx
	LOOP Loop1
	     pop Dy_Monster
	     pop Dx_Monster
ret
DrawMonster endp

DrawMonster2 proc                                ; draw monster
	mov cx,18
	push Dx2_Monster
	push Dy2_Monster
	mov si,offset Monster
	Loop1:
	     push cx
	     push Dx2_Monster
	     mov cx,18
	     Loop2:
	         push cx
	         mov ah,0Ch
			 mov al,byte ptr [si]
			 mov cx,Dx2_Monster
			 mov dx,Dy2_Monster
	         int 10h
			 inc Dx2_Monster
			 pop cx
			 add si ,TYPE Monster
	     LOOP Loop2
	     inc Dy2_Monster
	     pop Dx2_Monster
	     pop cx
	LOOP Loop1
	     pop Dy2_Monster
	     pop Dx2_Monster
ret
DrawMonster2 endp

Screen proc                                      ;draw screen
	mov _cursor,1
	mov ah,02h  ;set cursor
	mov dh,1
	mov dl,_cursor
	int 10h
	mov cx,6
	mov si,offset _level

	LoopLevel:
	    push cx
	    mov al,[si]
	    mov bh,0
	    mov bl,15
	    mov cx,1
	    mov ah,0Ah
	    int 10h
	    add si, TYPE _level
	    inc _cursor
	    mov ah,02h
	    mov dh,1
	    mov dl,_cursor
	    int 10h

	    pop cx
	LOOP LoopLevel


	mov al,gamelevel
	add al,48
	mov bh,0
	mov bl,15
	mov cx,1
	mov ah,0Ah
	int 10h
    
    Add _cursor,9
	mov cx,8
	mov ah,02h  ;set cursor
	mov dh,1
	mov dl,_cursor
	int 10h

	mov si,offset _name
	LoopName:
	    push cx
	    mov al,[si]
	    mov bh,0
	    mov bl,15
	    mov cx,1
	    mov ah,0Ah
	    int 10h
	    add si, TYPE _name
	    add _cursor,1
	    mov ah,02h
	    mov dh,1
	    mov dl,_cursor
	    int 10h

	  
	    pop cx
	LOOP LoopName 

	add _cursor,8
	mov ah,02h            ;set cursor
	mov dh,1
	mov dl,_cursor
	int 10h
	mov cx,6
	mov si,offset _score

	LoopScore:              ;loop for printing _score "Score:"
	    push cx
	    mov al,[si]
	    mov bh,0
	    mov bl,15
	    mov cx,1
	    mov ah,0Ah
	    int 10h
	    add si, TYPE _score
	    inc _cursor
	    mov ah,02h
	    mov dh,1
	    mov dl,_cursor
	    int 10h

	    pop cx
	LOOP LoopScore

	mov al,gameScore         ;for printing the score i.e a number
	add al,48
	mov bh,0
	mov bl,15
	mov cx,1
	mov ah,0Ah
	int 10h

    .if(dy_back==20)
	    push dx_heart
	    push dy_heart
		mov cx,lives
		mov bx,5
		LoopLives:
		    mov dx_heart,bx
		    mov dy_heart,20
		    push bx
		    push cx
		    call DrawHeart
		    pop cx
		    pop bx
		    add bx,16
		LOOP LoopLives
		pop dy_heart
	    pop dx_heart
	.endif 

ret
Screen endp


DrawSurface proc                                 ;Draw Surface
	push xs
	push ys
	mov cx,23
	Loop1:
	    push cx
		push ys
		mov si, offset brick
		mov cx,4
		Loop2:
			 push cx
			 push xs
			 mov cx,14
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,xs
				 mov dx,ys
				 int 10h
				 inc xs
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc ys
			 pop xs
			 pop cx
		LOOP Loop2
		pop ys
		add xs,14
		pop cx
	LOOP Loop1
	pop ys 
	pop xs
ret
DrawSurface endp




DrawHeart proc                                  ;draw heart
	push dx_heart
	push dy_heart
	mov si, offset Heart
		mov cx,13
		Loop2:
			 push cx
			 push dx_heart
			 mov cx,15
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,dx_heart
				 mov dx,dy_heart
				 int 10h
				 inc dx_heart
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc dy_heart
			 pop dx_heart
			 pop cx
		LOOP Loop2
		pop dy_heart
		pop dx_heart
ret
DrawHeart endp

DrawHeartBox proc                                  ;draw heart box
	push dx_heart
	push dy_heart
	mov si, offset Heart
		mov cx,13
		Loop2:
			 push cx
			 push dx_heart
			 mov cx,15
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,54
				 mov cx,dx_heart
				 mov dx,dy_heart
				 int 10h
				 inc dx_heart
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc dy_heart
			 pop dx_heart
			 pop cx
		LOOP Loop2
		pop dy_heart
		pop dx_heart
ret
DrawHeartBox endp

DrawCastle proc                                  ;draw castle
	push dx_castle
	push dy_castle
	mov si, offset Castle
		mov cx,94
		Loop2:
			 push cx
			 push dx_castle
			 mov cx,45
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,dx_castle
				 mov dx,dy_castle
				 int 10h
				 inc dx_castle
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc dy_castle
			 pop dx_castle
			 pop cx
		LOOP Loop2
		pop dy_castle
		pop dx_castle
ret
DrawCastle endp


DrawCoin proc                                  ;draw coin
	push dx_coin
	push dy_coin
	mov si, offset Coin
		mov cx,16
		Loop2:
			 push cx
			 push dx_coin
			 mov cx,14
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,dx_coin
				 mov dx,dy_coin
				 int 10h
				 inc dx_coin
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc dy_coin
			 pop dx_coin
			 pop cx
		LOOP Loop2
		pop dy_coin
		pop dx_coin
ret
DrawCoin endp

DrawCoinBox proc                                  ;draw coin box
	push dx_coin
	push dy_coin
		mov cx,16
		Loop2:
			 push cx
			 push dx_coin
			 mov cx,14
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,54
				 mov cx,dx_coin
				 mov dx,dy_coin
				 int 10h
				 inc dx_coin
				 pop cx
			 LOOP Loop3
			 inc dy_coin
			 pop dx_coin
			 pop cx
		LOOP Loop2
		pop dy_coin
		pop dx_coin
ret
DrawCoinBox endp



DrawPika proc                                  ;draw Pika
	push dx_pika
	push dy_pika
	mov si, offset Pikachu
		mov cx,61
		Loop2:
			 push cx
			 push dx_pika
			 mov cx,37
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,dx_pika
				 mov dx,dy_pika
				 int 10h
				 inc dx_pika
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc dy_pika
			 pop dx_pika
			 pop cx
		LOOP Loop2
		pop dy_pika
		pop dx_pika
ret
DrawPika endp



Drawball proc                                  ;draw ball
	push dx_ball
	push dy_ball
	mov si, offset Ball
		mov cx,14
		Loop2:
			 push cx
			 push dx_ball
			 mov cx,9
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,dx_ball
				 mov dx,dy_ball
				 int 10h
				 inc dx_ball
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc dy_ball
			 pop dx_ball
			 pop cx
		LOOP Loop2
		pop dy_ball
		pop dx_ball
ret
Drawball endp

Drawbox proc                                  ;draw ball
	push dx_ball
	push dy_ball
		mov cx,14
		Loop2:
		     mov si, offset Ball
			 push cx
			 push dx_ball
			 mov cx,9
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,dx_ball
				 mov dx,dy_ball
				 int 10h
				 inc dx_ball
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc dy_ball
			 pop dx_ball
			 pop cx
		LOOP Loop2
		pop dy_ball
		pop dx_ball
ret
Drawbox endp


DrawChocolate proc                               ;draw chocolate
	push dx_choc
	push dy_choc
	mov si, offset Chocolate
		mov cx,20
		Loop2:
			 push cx
			 push dx_choc
			 mov cx,14
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,dx_choc
				 mov dx,dy_choc
				 int 10h
				 inc dx_choc
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc dy_choc
			 pop dx_choc
			 pop cx
		LOOP Loop2
		pop dy_choc
		pop dx_choc
ret
DrawChocolate endp


DrawChocolateBox proc                               ;draw chocolate box
	push dx_choc
	push dy_choc
	mov si, offset Chocolate
		mov cx,20
		Loop2:
			 push cx
			 push dx_choc
			 mov cx,14
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,54
				 mov cx,dx_choc
				 mov dx,dy_choc
				 int 10h
				 inc dx_choc
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc dy_choc
			 pop dx_choc
			 pop cx
		LOOP Loop2
		pop dy_choc
		pop dx_choc
ret
DrawChocolateBox endp


DrawBackground proc
    mov dx_back,0
	mov dy_back,20
	push dx_back
	push dy_back
		mov cx,180
		Loop2:
			 push cx
			 push dx_back
			 mov cx,320
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,54
				 mov cx,dx_back
				 mov dx,dy_back
				 int 10h
				 inc dx_back
				 pop cx
			 LOOP Loop3
			 inc dy_back
			 pop dx_back
			 pop cx
		LOOP Loop2

	pop dy_back
	pop dx_back	
ret
DrawBackground endp

DrawBackground2 proc

	mov dx_back,0
	mov dy_back,0
	push dx_back
	push dy_back
		mov cx,200
		Loop2:
			 push cx
			 push dx_back
			 mov cx,320
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,00
				 mov cx,dx_back
				 mov dx,dy_back
				 int 10h
				 inc dx_back
				 pop cx
			 LOOP Loop3
			 inc dy_back
			 pop dx_back
			 pop cx
		LOOP Loop2
	pop dy_back
	pop dx_back	
	mov Dx_Mario,145
	mov Dy_mario,20
	call DrawFlag2
    call DrawSurface
    call DrawMario2

	mov _cursor,15
	mov ah,02h  ;set cursor
	mov dh,8
	mov dl,_cursor
	int 10h
	mov cx,9
	mov si,offset _over

	LoopOver:
	    
	    push cx
	    mov al,[si]
	    mov bh,0
	    mov bl,15
	    mov cx,1
	    mov ah,0Ah
	    int 10h
	    add si, TYPE _over
	    inc _cursor
	    mov ah,02h
	    mov dl,_cursor
	    int 10h

	    pop cx
	LOOP LoopOver

	mov _cursor,16
	mov ah,02h  ;set cursor
	mov dh,12
	mov dl,_cursor
	int 10h
	mov cx,6
	mov si,offset _Level

	LoopLevel:
	    
	    push cx
	    mov al,[si]
	    mov bh,0
	    mov bl,15
	    mov cx,1
	    mov ah,0Ah
	    int 10h
	    add si, TYPE _level
	    inc _cursor
	    mov ah,02h
	    mov dl,_cursor
	    mov dh, 12
	    int 10h

	    pop cx
	LOOP LoopLevel

	mov al,gameLevel
	add al,48
	mov bh,0
	mov bl,15
	mov cx,1
	mov ah,0Ah
	int 10h

	mov _cursor,16
	mov ah,02h  ;set cursor
	mov dh,14
	mov dl,_cursor
	int 10h
	mov cx,6
	mov si,offset _Score

	LoopScore:
	    
	    push cx
	    mov al,[si]
	    mov bh,0
	    mov bl,15
	    mov cx,1
	    mov ah,0Ah
	    int 10h
	    add si, TYPE _Score
	    inc _cursor
	    mov ah,02h
	    mov dl,_cursor
	    mov dh, 14
	    int 10h

	    pop cx
	LOOP LoopScore

	mov al,gameScore
	add al,48
	mov bh,0
	mov bl,15
	mov cx,1
	mov ah,0Ah
	int 10h



	mov _cursor,8
	mov ah,02h  ;set cursor
	mov dh,16
	mov dl,_cursor
	int 10h
	mov cx,24
	mov si,offset _again

	LoopAgain:
	    
	    push cx
	    mov al,[si]
	    mov bh,0
	    mov bl,15
	    mov cx,1
	    mov ah,0Ah
	    int 10h
	    add si, TYPE _again
	    inc _cursor
	    mov ah,02h
	    mov dl,_cursor
	    mov dh, 16
	    int 10h

	    pop cx
	LOOP LoopAgain


	mov _cursor,10
	mov ah,02h  ;set cursor
	mov dh,18
	mov dl,_cursor
	int 10h
	mov cx,19
	mov si,offset _quit

	LoopQuit:
	    
	    push cx
	    mov al,[si]
	    mov bh,0
	    mov bl,15
	    mov cx,1
	    mov ah,0Ah
	    int 10h
	    add si, TYPE _quit
	    inc _cursor
	    mov ah,02h
	    mov dl,_cursor
	    mov dh, 18
	    int 10h

	    pop cx
	LOOP LoopQuit 
   
ret
DrawBackground2 endp
;---------------------------------------------------------------------------------------------------------------------


;----------------------------------------HURDLES AND KEY DETECTION ---------------------------------------------------

KeyDetect proc                                   ;key detection
	mov ah, 01h
	int 16h
	jz ex
	mov ah,0
	int 16h
	cmp ah,'M'
	jne label2
	label1:
	    Call getrpixel
	    cmp al,04h
	    je ex
	    Call getuprpixel
	    cmp al,04h
	    je ex
	    add Dx_Mario,1
	    jmp ex
	label2: 		   ;LEFT
	    .if (dx_mario>0)
		    cmp ah,'K'
		    jne label3
		    Call getlpixel
		    cmp al,04h
		    je ex
		    sub Dx_Mario,1
		.endif
	    jmp label4
	label3: 		   ;UP
	    cmp ah,'H'
	    jne label4
	    .if Dy_Mario > 20
			sub Dy_Mario,1
			cmp Dy_Mario,163
			jne notinit
				mov ground,1
				jmp chk
			notinit:
				mov ground,0
			chk:
				cmp ground,0
				jne ex
				mov flyFlag, 1
	         	mov flyCount,0
        .endif
         	jmp ex
	label4: 		    ;DOWN
	    call getrlpixel
	    cmp al,04h
	    je ex
	    call getrpixel
	    cmp al,04h
	    je ex
	    call getuprpixel
	    cmp al,04h
	    je ex
	    call getlpixel
	    cmp al,04h
	    je ex
	    cmp ah,80h
	    je ex
	    cmp ground,0
	    jne ex
	ex:
ret
KeyDetect endp

GetrPixel proc                                   ;rightpixel
    mov ah,0dh
    mov bh,0
    mov cx,Dx_Mario
    add cx,23
    Mov dx,Dy_Mario
    int 10h
ret
GetrPixel endp

GetuprPixel proc				      ;up right pixel
    mov ah,0dh
    mov bh,0
    mov cx,Dx_Mario
    add cx,23
    Mov dx,Dy_Mario
    add dx,32
    int 10h
ret
GetuprPixel endp

GetdownPixel proc                    ; down pixel
    mov ah,0dh
    mov bh,0
    mov cx,Dx_Mario
    add cx,11
    mov dx,Dy_Mario
    add dx,25
    int 10h
ret
GetdownPixel endp

GetlPixel proc                                   ;left pixel
    mov ah,0dh
    mov bh,0
    mov cx,Dx_Mario
    sub cx,1
    Mov dx,Dy_Mario
    int 10h
ret
GetlPixel endp

GetrlPixel proc                                 ;right left pixel
    mov ah,0dh
    mov bh,0
    mov cx,Dx_Mario
    sub cx,1
    Mov dx,Dy_Mario
    add dx,35
    int 10h
ret
GetrlPixel endp

FlyUp proc                                      ;fly up
	.if flyFlag == 1 && dy_mario>20
		add flyCount,1
		.if flyCount < 60
			sub Dy_Mario,1
		.else 
			mov flyFlag, 0
			mov downFlag, 1
		.endif
	.endif
	
		
ret
FlyUp endp

 
FlyDown proc                                    ;fly down
	.if downFlag == 1 || dy_mario==20
		.if Dy_Mario<163
			add Dy_Mario,1
		.else
			mov downFlag, 0
			mov ground, 1
		.endif
	.endif
	ex:
ret
FlyDown endp



CallHurdles proc				 ;calling hurdles
    mov xpos,100
    mov ypos,160
    mov len,36
    mov hei,15
    Call DrawHurdles
    mov xpos,170
    mov ypos,160
    mov len,36
    mov hei,15
    Call DrawHurdles
    mov xpos,240
    mov ypos,160
    mov len,36
    mov hei,15
    Call DrawHurdles
ret
CallHurdles endp


CallHurdleslevel3 proc				;calling hurdles for level 3
    mov xpos,100
    mov ypos,160
    mov len,36
    mov hei,15
    Call DrawHurdles
    mov xpos,170
    mov ypos,160
    mov len,36
    mov hei,15
    Call DrawHurdles
ret
CallHurdleslevel3 endp
;--------------------------------------------------------------------------------------------------------------------------------
End Main
